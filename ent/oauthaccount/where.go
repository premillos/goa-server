// Code generated by ent, DO NOT EDIT.

package oauthaccount

import (
	"time"

	"com.goa/ent/predicate"
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

// ID filters vertices based on their ID field.
func ID(id int) predicate.OAuthAccount {
	return predicate.OAuthAccount(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id int) predicate.OAuthAccount {
	return predicate.OAuthAccount(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id int) predicate.OAuthAccount {
	return predicate.OAuthAccount(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...int) predicate.OAuthAccount {
	return predicate.OAuthAccount(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...int) predicate.OAuthAccount {
	return predicate.OAuthAccount(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id int) predicate.OAuthAccount {
	return predicate.OAuthAccount(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id int) predicate.OAuthAccount {
	return predicate.OAuthAccount(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id int) predicate.OAuthAccount {
	return predicate.OAuthAccount(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id int) predicate.OAuthAccount {
	return predicate.OAuthAccount(sql.FieldLTE(FieldID, id))
}

// Provider applies equality check predicate on the "provider" field. It's identical to ProviderEQ.
func Provider(v string) predicate.OAuthAccount {
	return predicate.OAuthAccount(sql.FieldEQ(FieldProvider, v))
}

// ProviderUserID applies equality check predicate on the "provider_user_id" field. It's identical to ProviderUserIDEQ.
func ProviderUserID(v string) predicate.OAuthAccount {
	return predicate.OAuthAccount(sql.FieldEQ(FieldProviderUserID, v))
}

// AccessToken applies equality check predicate on the "access_token" field. It's identical to AccessTokenEQ.
func AccessToken(v string) predicate.OAuthAccount {
	return predicate.OAuthAccount(sql.FieldEQ(FieldAccessToken, v))
}

// RefreshToken applies equality check predicate on the "refresh_token" field. It's identical to RefreshTokenEQ.
func RefreshToken(v string) predicate.OAuthAccount {
	return predicate.OAuthAccount(sql.FieldEQ(FieldRefreshToken, v))
}

// TokenExpiry applies equality check predicate on the "token_expiry" field. It's identical to TokenExpiryEQ.
func TokenExpiry(v time.Time) predicate.OAuthAccount {
	return predicate.OAuthAccount(sql.FieldEQ(FieldTokenExpiry, v))
}

// ProviderEQ applies the EQ predicate on the "provider" field.
func ProviderEQ(v string) predicate.OAuthAccount {
	return predicate.OAuthAccount(sql.FieldEQ(FieldProvider, v))
}

// ProviderNEQ applies the NEQ predicate on the "provider" field.
func ProviderNEQ(v string) predicate.OAuthAccount {
	return predicate.OAuthAccount(sql.FieldNEQ(FieldProvider, v))
}

// ProviderIn applies the In predicate on the "provider" field.
func ProviderIn(vs ...string) predicate.OAuthAccount {
	return predicate.OAuthAccount(sql.FieldIn(FieldProvider, vs...))
}

// ProviderNotIn applies the NotIn predicate on the "provider" field.
func ProviderNotIn(vs ...string) predicate.OAuthAccount {
	return predicate.OAuthAccount(sql.FieldNotIn(FieldProvider, vs...))
}

// ProviderGT applies the GT predicate on the "provider" field.
func ProviderGT(v string) predicate.OAuthAccount {
	return predicate.OAuthAccount(sql.FieldGT(FieldProvider, v))
}

// ProviderGTE applies the GTE predicate on the "provider" field.
func ProviderGTE(v string) predicate.OAuthAccount {
	return predicate.OAuthAccount(sql.FieldGTE(FieldProvider, v))
}

// ProviderLT applies the LT predicate on the "provider" field.
func ProviderLT(v string) predicate.OAuthAccount {
	return predicate.OAuthAccount(sql.FieldLT(FieldProvider, v))
}

// ProviderLTE applies the LTE predicate on the "provider" field.
func ProviderLTE(v string) predicate.OAuthAccount {
	return predicate.OAuthAccount(sql.FieldLTE(FieldProvider, v))
}

// ProviderContains applies the Contains predicate on the "provider" field.
func ProviderContains(v string) predicate.OAuthAccount {
	return predicate.OAuthAccount(sql.FieldContains(FieldProvider, v))
}

// ProviderHasPrefix applies the HasPrefix predicate on the "provider" field.
func ProviderHasPrefix(v string) predicate.OAuthAccount {
	return predicate.OAuthAccount(sql.FieldHasPrefix(FieldProvider, v))
}

// ProviderHasSuffix applies the HasSuffix predicate on the "provider" field.
func ProviderHasSuffix(v string) predicate.OAuthAccount {
	return predicate.OAuthAccount(sql.FieldHasSuffix(FieldProvider, v))
}

// ProviderEqualFold applies the EqualFold predicate on the "provider" field.
func ProviderEqualFold(v string) predicate.OAuthAccount {
	return predicate.OAuthAccount(sql.FieldEqualFold(FieldProvider, v))
}

// ProviderContainsFold applies the ContainsFold predicate on the "provider" field.
func ProviderContainsFold(v string) predicate.OAuthAccount {
	return predicate.OAuthAccount(sql.FieldContainsFold(FieldProvider, v))
}

// ProviderUserIDEQ applies the EQ predicate on the "provider_user_id" field.
func ProviderUserIDEQ(v string) predicate.OAuthAccount {
	return predicate.OAuthAccount(sql.FieldEQ(FieldProviderUserID, v))
}

// ProviderUserIDNEQ applies the NEQ predicate on the "provider_user_id" field.
func ProviderUserIDNEQ(v string) predicate.OAuthAccount {
	return predicate.OAuthAccount(sql.FieldNEQ(FieldProviderUserID, v))
}

// ProviderUserIDIn applies the In predicate on the "provider_user_id" field.
func ProviderUserIDIn(vs ...string) predicate.OAuthAccount {
	return predicate.OAuthAccount(sql.FieldIn(FieldProviderUserID, vs...))
}

// ProviderUserIDNotIn applies the NotIn predicate on the "provider_user_id" field.
func ProviderUserIDNotIn(vs ...string) predicate.OAuthAccount {
	return predicate.OAuthAccount(sql.FieldNotIn(FieldProviderUserID, vs...))
}

// ProviderUserIDGT applies the GT predicate on the "provider_user_id" field.
func ProviderUserIDGT(v string) predicate.OAuthAccount {
	return predicate.OAuthAccount(sql.FieldGT(FieldProviderUserID, v))
}

// ProviderUserIDGTE applies the GTE predicate on the "provider_user_id" field.
func ProviderUserIDGTE(v string) predicate.OAuthAccount {
	return predicate.OAuthAccount(sql.FieldGTE(FieldProviderUserID, v))
}

// ProviderUserIDLT applies the LT predicate on the "provider_user_id" field.
func ProviderUserIDLT(v string) predicate.OAuthAccount {
	return predicate.OAuthAccount(sql.FieldLT(FieldProviderUserID, v))
}

// ProviderUserIDLTE applies the LTE predicate on the "provider_user_id" field.
func ProviderUserIDLTE(v string) predicate.OAuthAccount {
	return predicate.OAuthAccount(sql.FieldLTE(FieldProviderUserID, v))
}

// ProviderUserIDContains applies the Contains predicate on the "provider_user_id" field.
func ProviderUserIDContains(v string) predicate.OAuthAccount {
	return predicate.OAuthAccount(sql.FieldContains(FieldProviderUserID, v))
}

// ProviderUserIDHasPrefix applies the HasPrefix predicate on the "provider_user_id" field.
func ProviderUserIDHasPrefix(v string) predicate.OAuthAccount {
	return predicate.OAuthAccount(sql.FieldHasPrefix(FieldProviderUserID, v))
}

// ProviderUserIDHasSuffix applies the HasSuffix predicate on the "provider_user_id" field.
func ProviderUserIDHasSuffix(v string) predicate.OAuthAccount {
	return predicate.OAuthAccount(sql.FieldHasSuffix(FieldProviderUserID, v))
}

// ProviderUserIDEqualFold applies the EqualFold predicate on the "provider_user_id" field.
func ProviderUserIDEqualFold(v string) predicate.OAuthAccount {
	return predicate.OAuthAccount(sql.FieldEqualFold(FieldProviderUserID, v))
}

// ProviderUserIDContainsFold applies the ContainsFold predicate on the "provider_user_id" field.
func ProviderUserIDContainsFold(v string) predicate.OAuthAccount {
	return predicate.OAuthAccount(sql.FieldContainsFold(FieldProviderUserID, v))
}

// AccessTokenEQ applies the EQ predicate on the "access_token" field.
func AccessTokenEQ(v string) predicate.OAuthAccount {
	return predicate.OAuthAccount(sql.FieldEQ(FieldAccessToken, v))
}

// AccessTokenNEQ applies the NEQ predicate on the "access_token" field.
func AccessTokenNEQ(v string) predicate.OAuthAccount {
	return predicate.OAuthAccount(sql.FieldNEQ(FieldAccessToken, v))
}

// AccessTokenIn applies the In predicate on the "access_token" field.
func AccessTokenIn(vs ...string) predicate.OAuthAccount {
	return predicate.OAuthAccount(sql.FieldIn(FieldAccessToken, vs...))
}

// AccessTokenNotIn applies the NotIn predicate on the "access_token" field.
func AccessTokenNotIn(vs ...string) predicate.OAuthAccount {
	return predicate.OAuthAccount(sql.FieldNotIn(FieldAccessToken, vs...))
}

// AccessTokenGT applies the GT predicate on the "access_token" field.
func AccessTokenGT(v string) predicate.OAuthAccount {
	return predicate.OAuthAccount(sql.FieldGT(FieldAccessToken, v))
}

// AccessTokenGTE applies the GTE predicate on the "access_token" field.
func AccessTokenGTE(v string) predicate.OAuthAccount {
	return predicate.OAuthAccount(sql.FieldGTE(FieldAccessToken, v))
}

// AccessTokenLT applies the LT predicate on the "access_token" field.
func AccessTokenLT(v string) predicate.OAuthAccount {
	return predicate.OAuthAccount(sql.FieldLT(FieldAccessToken, v))
}

// AccessTokenLTE applies the LTE predicate on the "access_token" field.
func AccessTokenLTE(v string) predicate.OAuthAccount {
	return predicate.OAuthAccount(sql.FieldLTE(FieldAccessToken, v))
}

// AccessTokenContains applies the Contains predicate on the "access_token" field.
func AccessTokenContains(v string) predicate.OAuthAccount {
	return predicate.OAuthAccount(sql.FieldContains(FieldAccessToken, v))
}

// AccessTokenHasPrefix applies the HasPrefix predicate on the "access_token" field.
func AccessTokenHasPrefix(v string) predicate.OAuthAccount {
	return predicate.OAuthAccount(sql.FieldHasPrefix(FieldAccessToken, v))
}

// AccessTokenHasSuffix applies the HasSuffix predicate on the "access_token" field.
func AccessTokenHasSuffix(v string) predicate.OAuthAccount {
	return predicate.OAuthAccount(sql.FieldHasSuffix(FieldAccessToken, v))
}

// AccessTokenIsNil applies the IsNil predicate on the "access_token" field.
func AccessTokenIsNil() predicate.OAuthAccount {
	return predicate.OAuthAccount(sql.FieldIsNull(FieldAccessToken))
}

// AccessTokenNotNil applies the NotNil predicate on the "access_token" field.
func AccessTokenNotNil() predicate.OAuthAccount {
	return predicate.OAuthAccount(sql.FieldNotNull(FieldAccessToken))
}

// AccessTokenEqualFold applies the EqualFold predicate on the "access_token" field.
func AccessTokenEqualFold(v string) predicate.OAuthAccount {
	return predicate.OAuthAccount(sql.FieldEqualFold(FieldAccessToken, v))
}

// AccessTokenContainsFold applies the ContainsFold predicate on the "access_token" field.
func AccessTokenContainsFold(v string) predicate.OAuthAccount {
	return predicate.OAuthAccount(sql.FieldContainsFold(FieldAccessToken, v))
}

// RefreshTokenEQ applies the EQ predicate on the "refresh_token" field.
func RefreshTokenEQ(v string) predicate.OAuthAccount {
	return predicate.OAuthAccount(sql.FieldEQ(FieldRefreshToken, v))
}

// RefreshTokenNEQ applies the NEQ predicate on the "refresh_token" field.
func RefreshTokenNEQ(v string) predicate.OAuthAccount {
	return predicate.OAuthAccount(sql.FieldNEQ(FieldRefreshToken, v))
}

// RefreshTokenIn applies the In predicate on the "refresh_token" field.
func RefreshTokenIn(vs ...string) predicate.OAuthAccount {
	return predicate.OAuthAccount(sql.FieldIn(FieldRefreshToken, vs...))
}

// RefreshTokenNotIn applies the NotIn predicate on the "refresh_token" field.
func RefreshTokenNotIn(vs ...string) predicate.OAuthAccount {
	return predicate.OAuthAccount(sql.FieldNotIn(FieldRefreshToken, vs...))
}

// RefreshTokenGT applies the GT predicate on the "refresh_token" field.
func RefreshTokenGT(v string) predicate.OAuthAccount {
	return predicate.OAuthAccount(sql.FieldGT(FieldRefreshToken, v))
}

// RefreshTokenGTE applies the GTE predicate on the "refresh_token" field.
func RefreshTokenGTE(v string) predicate.OAuthAccount {
	return predicate.OAuthAccount(sql.FieldGTE(FieldRefreshToken, v))
}

// RefreshTokenLT applies the LT predicate on the "refresh_token" field.
func RefreshTokenLT(v string) predicate.OAuthAccount {
	return predicate.OAuthAccount(sql.FieldLT(FieldRefreshToken, v))
}

// RefreshTokenLTE applies the LTE predicate on the "refresh_token" field.
func RefreshTokenLTE(v string) predicate.OAuthAccount {
	return predicate.OAuthAccount(sql.FieldLTE(FieldRefreshToken, v))
}

// RefreshTokenContains applies the Contains predicate on the "refresh_token" field.
func RefreshTokenContains(v string) predicate.OAuthAccount {
	return predicate.OAuthAccount(sql.FieldContains(FieldRefreshToken, v))
}

// RefreshTokenHasPrefix applies the HasPrefix predicate on the "refresh_token" field.
func RefreshTokenHasPrefix(v string) predicate.OAuthAccount {
	return predicate.OAuthAccount(sql.FieldHasPrefix(FieldRefreshToken, v))
}

// RefreshTokenHasSuffix applies the HasSuffix predicate on the "refresh_token" field.
func RefreshTokenHasSuffix(v string) predicate.OAuthAccount {
	return predicate.OAuthAccount(sql.FieldHasSuffix(FieldRefreshToken, v))
}

// RefreshTokenIsNil applies the IsNil predicate on the "refresh_token" field.
func RefreshTokenIsNil() predicate.OAuthAccount {
	return predicate.OAuthAccount(sql.FieldIsNull(FieldRefreshToken))
}

// RefreshTokenNotNil applies the NotNil predicate on the "refresh_token" field.
func RefreshTokenNotNil() predicate.OAuthAccount {
	return predicate.OAuthAccount(sql.FieldNotNull(FieldRefreshToken))
}

// RefreshTokenEqualFold applies the EqualFold predicate on the "refresh_token" field.
func RefreshTokenEqualFold(v string) predicate.OAuthAccount {
	return predicate.OAuthAccount(sql.FieldEqualFold(FieldRefreshToken, v))
}

// RefreshTokenContainsFold applies the ContainsFold predicate on the "refresh_token" field.
func RefreshTokenContainsFold(v string) predicate.OAuthAccount {
	return predicate.OAuthAccount(sql.FieldContainsFold(FieldRefreshToken, v))
}

// TokenExpiryEQ applies the EQ predicate on the "token_expiry" field.
func TokenExpiryEQ(v time.Time) predicate.OAuthAccount {
	return predicate.OAuthAccount(sql.FieldEQ(FieldTokenExpiry, v))
}

// TokenExpiryNEQ applies the NEQ predicate on the "token_expiry" field.
func TokenExpiryNEQ(v time.Time) predicate.OAuthAccount {
	return predicate.OAuthAccount(sql.FieldNEQ(FieldTokenExpiry, v))
}

// TokenExpiryIn applies the In predicate on the "token_expiry" field.
func TokenExpiryIn(vs ...time.Time) predicate.OAuthAccount {
	return predicate.OAuthAccount(sql.FieldIn(FieldTokenExpiry, vs...))
}

// TokenExpiryNotIn applies the NotIn predicate on the "token_expiry" field.
func TokenExpiryNotIn(vs ...time.Time) predicate.OAuthAccount {
	return predicate.OAuthAccount(sql.FieldNotIn(FieldTokenExpiry, vs...))
}

// TokenExpiryGT applies the GT predicate on the "token_expiry" field.
func TokenExpiryGT(v time.Time) predicate.OAuthAccount {
	return predicate.OAuthAccount(sql.FieldGT(FieldTokenExpiry, v))
}

// TokenExpiryGTE applies the GTE predicate on the "token_expiry" field.
func TokenExpiryGTE(v time.Time) predicate.OAuthAccount {
	return predicate.OAuthAccount(sql.FieldGTE(FieldTokenExpiry, v))
}

// TokenExpiryLT applies the LT predicate on the "token_expiry" field.
func TokenExpiryLT(v time.Time) predicate.OAuthAccount {
	return predicate.OAuthAccount(sql.FieldLT(FieldTokenExpiry, v))
}

// TokenExpiryLTE applies the LTE predicate on the "token_expiry" field.
func TokenExpiryLTE(v time.Time) predicate.OAuthAccount {
	return predicate.OAuthAccount(sql.FieldLTE(FieldTokenExpiry, v))
}

// TokenExpiryIsNil applies the IsNil predicate on the "token_expiry" field.
func TokenExpiryIsNil() predicate.OAuthAccount {
	return predicate.OAuthAccount(sql.FieldIsNull(FieldTokenExpiry))
}

// TokenExpiryNotNil applies the NotNil predicate on the "token_expiry" field.
func TokenExpiryNotNil() predicate.OAuthAccount {
	return predicate.OAuthAccount(sql.FieldNotNull(FieldTokenExpiry))
}

// HasUser applies the HasEdge predicate on the "user" edge.
func HasUser() predicate.OAuthAccount {
	return predicate.OAuthAccount(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, UserTable, UserColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasUserWith applies the HasEdge predicate on the "user" edge with a given conditions (other predicates).
func HasUserWith(preds ...predicate.User) predicate.OAuthAccount {
	return predicate.OAuthAccount(func(s *sql.Selector) {
		step := newUserStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.OAuthAccount) predicate.OAuthAccount {
	return predicate.OAuthAccount(sql.AndPredicates(predicates...))
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.OAuthAccount) predicate.OAuthAccount {
	return predicate.OAuthAccount(sql.OrPredicates(predicates...))
}

// Not applies the not operator on the given predicate.
func Not(p predicate.OAuthAccount) predicate.OAuthAccount {
	return predicate.OAuthAccount(sql.NotPredicates(p))
}
