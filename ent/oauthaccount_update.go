// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"com.goa/ent/oauthaccount"
	"com.goa/ent/predicate"
	"com.goa/ent/user"
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/google/uuid"
)

// OAuthAccountUpdate is the builder for updating OAuthAccount entities.
type OAuthAccountUpdate struct {
	config
	hooks    []Hook
	mutation *OAuthAccountMutation
}

// Where appends a list predicates to the OAuthAccountUpdate builder.
func (oau *OAuthAccountUpdate) Where(ps ...predicate.OAuthAccount) *OAuthAccountUpdate {
	oau.mutation.Where(ps...)
	return oau
}

// SetProvider sets the "provider" field.
func (oau *OAuthAccountUpdate) SetProvider(s string) *OAuthAccountUpdate {
	oau.mutation.SetProvider(s)
	return oau
}

// SetNillableProvider sets the "provider" field if the given value is not nil.
func (oau *OAuthAccountUpdate) SetNillableProvider(s *string) *OAuthAccountUpdate {
	if s != nil {
		oau.SetProvider(*s)
	}
	return oau
}

// SetProviderUserID sets the "provider_user_id" field.
func (oau *OAuthAccountUpdate) SetProviderUserID(s string) *OAuthAccountUpdate {
	oau.mutation.SetProviderUserID(s)
	return oau
}

// SetNillableProviderUserID sets the "provider_user_id" field if the given value is not nil.
func (oau *OAuthAccountUpdate) SetNillableProviderUserID(s *string) *OAuthAccountUpdate {
	if s != nil {
		oau.SetProviderUserID(*s)
	}
	return oau
}

// SetAccessToken sets the "access_token" field.
func (oau *OAuthAccountUpdate) SetAccessToken(s string) *OAuthAccountUpdate {
	oau.mutation.SetAccessToken(s)
	return oau
}

// SetNillableAccessToken sets the "access_token" field if the given value is not nil.
func (oau *OAuthAccountUpdate) SetNillableAccessToken(s *string) *OAuthAccountUpdate {
	if s != nil {
		oau.SetAccessToken(*s)
	}
	return oau
}

// ClearAccessToken clears the value of the "access_token" field.
func (oau *OAuthAccountUpdate) ClearAccessToken() *OAuthAccountUpdate {
	oau.mutation.ClearAccessToken()
	return oau
}

// SetRefreshToken sets the "refresh_token" field.
func (oau *OAuthAccountUpdate) SetRefreshToken(s string) *OAuthAccountUpdate {
	oau.mutation.SetRefreshToken(s)
	return oau
}

// SetNillableRefreshToken sets the "refresh_token" field if the given value is not nil.
func (oau *OAuthAccountUpdate) SetNillableRefreshToken(s *string) *OAuthAccountUpdate {
	if s != nil {
		oau.SetRefreshToken(*s)
	}
	return oau
}

// ClearRefreshToken clears the value of the "refresh_token" field.
func (oau *OAuthAccountUpdate) ClearRefreshToken() *OAuthAccountUpdate {
	oau.mutation.ClearRefreshToken()
	return oau
}

// SetTokenExpiry sets the "token_expiry" field.
func (oau *OAuthAccountUpdate) SetTokenExpiry(t time.Time) *OAuthAccountUpdate {
	oau.mutation.SetTokenExpiry(t)
	return oau
}

// SetNillableTokenExpiry sets the "token_expiry" field if the given value is not nil.
func (oau *OAuthAccountUpdate) SetNillableTokenExpiry(t *time.Time) *OAuthAccountUpdate {
	if t != nil {
		oau.SetTokenExpiry(*t)
	}
	return oau
}

// ClearTokenExpiry clears the value of the "token_expiry" field.
func (oau *OAuthAccountUpdate) ClearTokenExpiry() *OAuthAccountUpdate {
	oau.mutation.ClearTokenExpiry()
	return oau
}

// SetUserID sets the "user" edge to the User entity by ID.
func (oau *OAuthAccountUpdate) SetUserID(id uuid.UUID) *OAuthAccountUpdate {
	oau.mutation.SetUserID(id)
	return oau
}

// SetNillableUserID sets the "user" edge to the User entity by ID if the given value is not nil.
func (oau *OAuthAccountUpdate) SetNillableUserID(id *uuid.UUID) *OAuthAccountUpdate {
	if id != nil {
		oau = oau.SetUserID(*id)
	}
	return oau
}

// SetUser sets the "user" edge to the User entity.
func (oau *OAuthAccountUpdate) SetUser(u *User) *OAuthAccountUpdate {
	return oau.SetUserID(u.ID)
}

// Mutation returns the OAuthAccountMutation object of the builder.
func (oau *OAuthAccountUpdate) Mutation() *OAuthAccountMutation {
	return oau.mutation
}

// ClearUser clears the "user" edge to the User entity.
func (oau *OAuthAccountUpdate) ClearUser() *OAuthAccountUpdate {
	oau.mutation.ClearUser()
	return oau
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (oau *OAuthAccountUpdate) Save(ctx context.Context) (int, error) {
	return withHooks(ctx, oau.sqlSave, oau.mutation, oau.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (oau *OAuthAccountUpdate) SaveX(ctx context.Context) int {
	affected, err := oau.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (oau *OAuthAccountUpdate) Exec(ctx context.Context) error {
	_, err := oau.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (oau *OAuthAccountUpdate) ExecX(ctx context.Context) {
	if err := oau.Exec(ctx); err != nil {
		panic(err)
	}
}

func (oau *OAuthAccountUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := sqlgraph.NewUpdateSpec(oauthaccount.Table, oauthaccount.Columns, sqlgraph.NewFieldSpec(oauthaccount.FieldID, field.TypeInt))
	if ps := oau.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := oau.mutation.Provider(); ok {
		_spec.SetField(oauthaccount.FieldProvider, field.TypeString, value)
	}
	if value, ok := oau.mutation.ProviderUserID(); ok {
		_spec.SetField(oauthaccount.FieldProviderUserID, field.TypeString, value)
	}
	if value, ok := oau.mutation.AccessToken(); ok {
		_spec.SetField(oauthaccount.FieldAccessToken, field.TypeString, value)
	}
	if oau.mutation.AccessTokenCleared() {
		_spec.ClearField(oauthaccount.FieldAccessToken, field.TypeString)
	}
	if value, ok := oau.mutation.RefreshToken(); ok {
		_spec.SetField(oauthaccount.FieldRefreshToken, field.TypeString, value)
	}
	if oau.mutation.RefreshTokenCleared() {
		_spec.ClearField(oauthaccount.FieldRefreshToken, field.TypeString)
	}
	if value, ok := oau.mutation.TokenExpiry(); ok {
		_spec.SetField(oauthaccount.FieldTokenExpiry, field.TypeTime, value)
	}
	if oau.mutation.TokenExpiryCleared() {
		_spec.ClearField(oauthaccount.FieldTokenExpiry, field.TypeTime)
	}
	if oau.mutation.UserCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   oauthaccount.UserTable,
			Columns: []string{oauthaccount.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := oau.mutation.UserIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   oauthaccount.UserTable,
			Columns: []string{oauthaccount.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, oau.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{oauthaccount.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	oau.mutation.done = true
	return n, nil
}

// OAuthAccountUpdateOne is the builder for updating a single OAuthAccount entity.
type OAuthAccountUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *OAuthAccountMutation
}

// SetProvider sets the "provider" field.
func (oauo *OAuthAccountUpdateOne) SetProvider(s string) *OAuthAccountUpdateOne {
	oauo.mutation.SetProvider(s)
	return oauo
}

// SetNillableProvider sets the "provider" field if the given value is not nil.
func (oauo *OAuthAccountUpdateOne) SetNillableProvider(s *string) *OAuthAccountUpdateOne {
	if s != nil {
		oauo.SetProvider(*s)
	}
	return oauo
}

// SetProviderUserID sets the "provider_user_id" field.
func (oauo *OAuthAccountUpdateOne) SetProviderUserID(s string) *OAuthAccountUpdateOne {
	oauo.mutation.SetProviderUserID(s)
	return oauo
}

// SetNillableProviderUserID sets the "provider_user_id" field if the given value is not nil.
func (oauo *OAuthAccountUpdateOne) SetNillableProviderUserID(s *string) *OAuthAccountUpdateOne {
	if s != nil {
		oauo.SetProviderUserID(*s)
	}
	return oauo
}

// SetAccessToken sets the "access_token" field.
func (oauo *OAuthAccountUpdateOne) SetAccessToken(s string) *OAuthAccountUpdateOne {
	oauo.mutation.SetAccessToken(s)
	return oauo
}

// SetNillableAccessToken sets the "access_token" field if the given value is not nil.
func (oauo *OAuthAccountUpdateOne) SetNillableAccessToken(s *string) *OAuthAccountUpdateOne {
	if s != nil {
		oauo.SetAccessToken(*s)
	}
	return oauo
}

// ClearAccessToken clears the value of the "access_token" field.
func (oauo *OAuthAccountUpdateOne) ClearAccessToken() *OAuthAccountUpdateOne {
	oauo.mutation.ClearAccessToken()
	return oauo
}

// SetRefreshToken sets the "refresh_token" field.
func (oauo *OAuthAccountUpdateOne) SetRefreshToken(s string) *OAuthAccountUpdateOne {
	oauo.mutation.SetRefreshToken(s)
	return oauo
}

// SetNillableRefreshToken sets the "refresh_token" field if the given value is not nil.
func (oauo *OAuthAccountUpdateOne) SetNillableRefreshToken(s *string) *OAuthAccountUpdateOne {
	if s != nil {
		oauo.SetRefreshToken(*s)
	}
	return oauo
}

// ClearRefreshToken clears the value of the "refresh_token" field.
func (oauo *OAuthAccountUpdateOne) ClearRefreshToken() *OAuthAccountUpdateOne {
	oauo.mutation.ClearRefreshToken()
	return oauo
}

// SetTokenExpiry sets the "token_expiry" field.
func (oauo *OAuthAccountUpdateOne) SetTokenExpiry(t time.Time) *OAuthAccountUpdateOne {
	oauo.mutation.SetTokenExpiry(t)
	return oauo
}

// SetNillableTokenExpiry sets the "token_expiry" field if the given value is not nil.
func (oauo *OAuthAccountUpdateOne) SetNillableTokenExpiry(t *time.Time) *OAuthAccountUpdateOne {
	if t != nil {
		oauo.SetTokenExpiry(*t)
	}
	return oauo
}

// ClearTokenExpiry clears the value of the "token_expiry" field.
func (oauo *OAuthAccountUpdateOne) ClearTokenExpiry() *OAuthAccountUpdateOne {
	oauo.mutation.ClearTokenExpiry()
	return oauo
}

// SetUserID sets the "user" edge to the User entity by ID.
func (oauo *OAuthAccountUpdateOne) SetUserID(id uuid.UUID) *OAuthAccountUpdateOne {
	oauo.mutation.SetUserID(id)
	return oauo
}

// SetNillableUserID sets the "user" edge to the User entity by ID if the given value is not nil.
func (oauo *OAuthAccountUpdateOne) SetNillableUserID(id *uuid.UUID) *OAuthAccountUpdateOne {
	if id != nil {
		oauo = oauo.SetUserID(*id)
	}
	return oauo
}

// SetUser sets the "user" edge to the User entity.
func (oauo *OAuthAccountUpdateOne) SetUser(u *User) *OAuthAccountUpdateOne {
	return oauo.SetUserID(u.ID)
}

// Mutation returns the OAuthAccountMutation object of the builder.
func (oauo *OAuthAccountUpdateOne) Mutation() *OAuthAccountMutation {
	return oauo.mutation
}

// ClearUser clears the "user" edge to the User entity.
func (oauo *OAuthAccountUpdateOne) ClearUser() *OAuthAccountUpdateOne {
	oauo.mutation.ClearUser()
	return oauo
}

// Where appends a list predicates to the OAuthAccountUpdate builder.
func (oauo *OAuthAccountUpdateOne) Where(ps ...predicate.OAuthAccount) *OAuthAccountUpdateOne {
	oauo.mutation.Where(ps...)
	return oauo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (oauo *OAuthAccountUpdateOne) Select(field string, fields ...string) *OAuthAccountUpdateOne {
	oauo.fields = append([]string{field}, fields...)
	return oauo
}

// Save executes the query and returns the updated OAuthAccount entity.
func (oauo *OAuthAccountUpdateOne) Save(ctx context.Context) (*OAuthAccount, error) {
	return withHooks(ctx, oauo.sqlSave, oauo.mutation, oauo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (oauo *OAuthAccountUpdateOne) SaveX(ctx context.Context) *OAuthAccount {
	node, err := oauo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (oauo *OAuthAccountUpdateOne) Exec(ctx context.Context) error {
	_, err := oauo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (oauo *OAuthAccountUpdateOne) ExecX(ctx context.Context) {
	if err := oauo.Exec(ctx); err != nil {
		panic(err)
	}
}

func (oauo *OAuthAccountUpdateOne) sqlSave(ctx context.Context) (_node *OAuthAccount, err error) {
	_spec := sqlgraph.NewUpdateSpec(oauthaccount.Table, oauthaccount.Columns, sqlgraph.NewFieldSpec(oauthaccount.FieldID, field.TypeInt))
	id, ok := oauo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "OAuthAccount.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := oauo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, oauthaccount.FieldID)
		for _, f := range fields {
			if !oauthaccount.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != oauthaccount.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := oauo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := oauo.mutation.Provider(); ok {
		_spec.SetField(oauthaccount.FieldProvider, field.TypeString, value)
	}
	if value, ok := oauo.mutation.ProviderUserID(); ok {
		_spec.SetField(oauthaccount.FieldProviderUserID, field.TypeString, value)
	}
	if value, ok := oauo.mutation.AccessToken(); ok {
		_spec.SetField(oauthaccount.FieldAccessToken, field.TypeString, value)
	}
	if oauo.mutation.AccessTokenCleared() {
		_spec.ClearField(oauthaccount.FieldAccessToken, field.TypeString)
	}
	if value, ok := oauo.mutation.RefreshToken(); ok {
		_spec.SetField(oauthaccount.FieldRefreshToken, field.TypeString, value)
	}
	if oauo.mutation.RefreshTokenCleared() {
		_spec.ClearField(oauthaccount.FieldRefreshToken, field.TypeString)
	}
	if value, ok := oauo.mutation.TokenExpiry(); ok {
		_spec.SetField(oauthaccount.FieldTokenExpiry, field.TypeTime, value)
	}
	if oauo.mutation.TokenExpiryCleared() {
		_spec.ClearField(oauthaccount.FieldTokenExpiry, field.TypeTime)
	}
	if oauo.mutation.UserCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   oauthaccount.UserTable,
			Columns: []string{oauthaccount.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := oauo.mutation.UserIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   oauthaccount.UserTable,
			Columns: []string{oauthaccount.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &OAuthAccount{config: oauo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, oauo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{oauthaccount.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	oauo.mutation.done = true
	return _node, nil
}
