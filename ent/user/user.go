// Code generated by ent, DO NOT EDIT.

package user

import (
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"github.com/google/uuid"
)

const (
	// Label holds the string label denoting the user type in the database.
	Label = "user"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldShowID holds the string denoting the show_id field in the database.
	FieldShowID = "show_id"
	// FieldName holds the string denoting the name field in the database.
	FieldName = "name"
	// FieldEmail holds the string denoting the email field in the database.
	FieldEmail = "email"
	// FieldPassword holds the string denoting the password field in the database.
	FieldPassword = "password"
	// FieldSalt holds the string denoting the salt field in the database.
	FieldSalt = "salt"
	// FieldPhone holds the string denoting the phone field in the database.
	FieldPhone = "phone"
	// FieldAvatar holds the string denoting the avatar field in the database.
	FieldAvatar = "avatar"
	// EdgeOauthAccounts holds the string denoting the oauth_accounts edge name in mutations.
	EdgeOauthAccounts = "oauth_accounts"
	// Table holds the table name of the user in the database.
	Table = "users"
	// OauthAccountsTable is the table that holds the oauth_accounts relation/edge.
	OauthAccountsTable = "oauth_accounts"
	// OauthAccountsInverseTable is the table name for the OAuthAccount entity.
	// It exists in this package in order to avoid circular dependency with the "oauthaccount" package.
	OauthAccountsInverseTable = "oauth_accounts"
	// OauthAccountsColumn is the table column denoting the oauth_accounts relation/edge.
	OauthAccountsColumn = "user_oauth_accounts"
)

// Columns holds all SQL columns for user fields.
var Columns = []string{
	FieldID,
	FieldShowID,
	FieldName,
	FieldEmail,
	FieldPassword,
	FieldSalt,
	FieldPhone,
	FieldAvatar,
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	return false
}

var (
	// DefaultShowID holds the default value on creation for the "show_id" field.
	DefaultShowID string
	// DefaultName holds the default value on creation for the "name" field.
	DefaultName string
	// DefaultPassword holds the default value on creation for the "password" field.
	DefaultPassword string
	// SaltValidator is a validator for the "salt" field. It is called by the builders before save.
	SaltValidator func(string) error
	// DefaultAvatar holds the default value on creation for the "avatar" field.
	DefaultAvatar string
	// DefaultID holds the default value on creation for the "id" field.
	DefaultID func() uuid.UUID
)

// OrderOption defines the ordering options for the User queries.
type OrderOption func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// ByShowID orders the results by the show_id field.
func ByShowID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldShowID, opts...).ToFunc()
}

// ByName orders the results by the name field.
func ByName(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldName, opts...).ToFunc()
}

// ByEmail orders the results by the email field.
func ByEmail(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldEmail, opts...).ToFunc()
}

// ByPassword orders the results by the password field.
func ByPassword(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldPassword, opts...).ToFunc()
}

// BySalt orders the results by the salt field.
func BySalt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldSalt, opts...).ToFunc()
}

// ByPhone orders the results by the phone field.
func ByPhone(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldPhone, opts...).ToFunc()
}

// ByAvatar orders the results by the avatar field.
func ByAvatar(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldAvatar, opts...).ToFunc()
}

// ByOauthAccountsCount orders the results by oauth_accounts count.
func ByOauthAccountsCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newOauthAccountsStep(), opts...)
	}
}

// ByOauthAccounts orders the results by oauth_accounts terms.
func ByOauthAccounts(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newOauthAccountsStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}
func newOauthAccountsStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(OauthAccountsInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2M, false, OauthAccountsTable, OauthAccountsColumn),
	)
}
